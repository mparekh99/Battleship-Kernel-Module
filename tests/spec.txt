-Introduction:

	We have thought about implementing the game "Battleship",
	as a character device driver. In the game - a random board
	will be generted (Optionally - Based on user input regarding
	size of board and number of battleships). A user will write
	a cell number, and will be able to read, whether he - hit, miss
	or sunk the enemy battleship. Once he is done he will receive
	the Victory message (v). The player will be able to return
	to previous moves using lseek. And create a new board with other
	Parameters using ioctl.
	Upon error, the module will return the error value (negative).
	The module doesn`t have to support concurrency.

*The inspiration for the following template
has been Hila`s and Andrey`s beautiful document*

-Syscall specification:

	open(2):
		-Description: Returns a file descriptor associated with the
			 device driver.
		-Behavior: If all parameters are valid, returns a file descriptor,
			with offset to the last written byte. So if a player reads
			from the file, it will receive the result of the last write.
		-Parameters: const char *pathname - pathname to the device driver.
			int flags - defines the mode in which the file opens.
		-Returns: File descriptor upon success. And error value upon failure.
		-Failure Modes:
			- 'EACCES' - requested access to the file is not allowed.
				Possibly because of wrong path, or the user doesn`t
				Have the permissions requested.
			- 'EINVAL' - invalid value in flags.

	close(2):
		-Description: closes file with given file descriptor, without
			changing the internal state.
		-Behavior: closes file associated with the device driver in the
			processes fdt.
		-Parameters: int fd - file descriptor.
		-Returns: 0 on success. On error, error value is returned.
		-Failure Modes:
			- 'EBADF' - fd isn`t a valid open file descriptor.
		-State: internal state of the device driver isn`t affected
			due to the close of the file descriptor.

	read(2):
		-Description: Attempts to read up to count bytes from file descriptor
			fd into the buffer strating at buf. Reads byte that indicates
			the result of the matching write to the device driver. And the
			matching players move.
		-Behavior: If all parameters are valid (file descriptor, buffer and
			a non negative number of bytes) tries to read count bytes to buffer.
			Reads the move and the result, from the given offset.
			If count doesn`t round to the needed amount - rounds down.
			For example, Count is 10, and it is enough to read 1 move: (01,01):h.
			Meaning: tried to shoot at location (1,1) and hit the battleship there.
			Important note: Although it writes to buffer both the move and
			the result. when file offset is changed, we expect it to only change
			the turn. Meaning: The device driver should associate the move with
			the result by itself. So a read from any offset in the file (if it
			is within bounds) should be possible (If all other conditions hold).
			If read was successful, offset within file isn`t moved by the amount
			of bytes read, but by the amount of moves read.
			So the smallest amount possible to be read is 9 bytes, which represent
			a single move and it`s result.
		-Parameters: int fd - file descriptor.
			void buf[] - pointer to buffer to read to.
			int count - amount of bytes to read - each move should take exactly
			9 bytes. (xx,yy):r. where r is result.
		-Returns: On success ,the number of bytes read is returned. And the file position
			is advanced by the *number of moves* that matches it. 9 bytes = move.
			On error, error value is returned.
		-Failure Modes:
			- 'EBADF' - fd is not a valid file descriptor ir is not open for reading.
			- 'EFAULT' - buf is outside our accesible address space.
			- 'EINVAL' - fd is attached to an object which isn`t suitable for reading.
				- count is a negative number.
		-State:
			If read was successful, offset within file is moved by the amount of
			*moves* read.

	write(2):
		-Description: Writes count bytes from the buffer starting at buf
			to the file referred to by the file descriptor fd.
			The bytes read are interpreted as a move - so must
			be a valid move, otherwise errors will be thrown.
		-Behavior: The user provides a buffer, fd and count bytes.
			7 bytes match a move. And it`s the users responsibility to
			provide valid moves of the form (xx,yy). If the moves are valid
			internal buffers will be filled with responses (available to the user
			through read).
			Important Note: The following should return an error:
				- Writing illegal moves (both illegal characters and outside
				board bounds).
				- Hitting a previously hit location.
			In case of a sequence of moves, the module should process correctly
			The legal moves, up to the illegal moves.
			For example: for a sequence: (01,01),(10000,100000000). The first move
			should be accepted (if that cell hasn`t been hit). And the second
			one should cause an error.
		-Parameters: int fd - file descriptor.
			void buf[] - pointer to buffer to read from.
			int count - amount of bytes to read - each move should take exactly
			7 bytes. (xx,yy). And be within the board borders. Can`t hit same
			location twice.
		-Returns: On success ,the number of moves received is returned.
			On error, error value is returned.
		-Failure Modes:
			- 'EBADF' - fd is not a valid file descriptor or is not open for writing.
			- 'EFAULT' - buf is outside our accesible address space.
			- 'EINVAL' - fd is attached to an object which isn`t suitable for reading.
				- count is a negative number or doesn`t match a valid amount of bytes
				per move (7). Or an illegal move has been attempted (as decribed in
				the behavior section).
		-State:
			If the a move has been read and is legal. It is registered in internal matching
			data structures. And the matching: result is put into the read buffer, for further
			reading.

	lseek(2):
		-Description: reposition read file offset.
		-Behavior: Repositions the file offset of the open file description
			associated with the file descriptor fd to the argument offset
			according to the directive whence as follows:
			SEEK_SET:
				the file offset is set to offset bytes.
			SEEK_CUR:
				The file offset is set to its current location plus
				offset bytes.
			SEEK_END:
				The file offset is set to the size of the file plus offset bytes.
			Important: every byte in the offset matches a result of a single move.
			Doesn`t allow the number of bytes to be set beyond the end of the file.
		-Parameters: int fd - file descriptor.
			off_t offset - The number of bytes to offset by.
			int whence - directive, semantics explained above.
		-Returns: On success , the resulting offset location as measured in bytes from the
			beginning of the file.
			On error, error value is returned.
		-Failure Modes:
			- 'EBADF' - fd is not a valid file descriptor.
			- 'EFAULT' - buf is outside our accesible address space.
			- 'EINVAL' - whence is not valid, or if trying to offset to
			an invalid location.
		-State:
			same as stated in behavior. Repositions file offset according
			to diretive whence and offset value.

	Ioctl(2):
		-Description: Control device. Used to re-create game with different parameters,
        and to perform basic undo redo operations.
		-Behavior: Ioctl receives 2 parameters - board size and number of boats.
			Implementors should decide on configuration of max size and amount
			of boats and their size. (What are the sizes of the boats, For example:
			First boat is size 3, second is size 4, third is size 5 and again).
			Of course the amount of ships can`t exceed the number of cells on the
			board, and ships can`t overlap.
			Recreates the board from scratch, and re-generates randomly the ships
			location. Board is initialized - meaning no moves are performed on this
			new board. And all previous information is lost.
			For undo and redo - they cancel & bring back the amount of moves stated.
			Undo enables to cancel the amount of moves stated (should also effect
			the results that read returns - a user can`t read moves that he canceled).
			Same for redo - effects the read operation, a user will be able to read the
			result of moves that were brought back.
			If redo or undo is chosen - then board_size serves as the number of moves.
		-Parameters: int fd - file descriptor.
			int board_size - The new size for the board (its a square so it will be
			board_size * board_size).
			If the operation chosen in undo/redo - it states the amount of moves.
			int ships - Number of ships on the new board.
		-Returns: 0 On success , -1 on error.
		-Failure Modes:
			- 'EBADF' - fd is not a valid file descriptor.
			- 'EINVAL' - number of ships or board size are negative.
		-State:
			Creates a new board with no moves performed on it, according to
			given parameters (If they are legal).

-Resource Lifecycle:
		-Initialization - Upon initialization, a board of size 20*20 is allocated with a
		random ship location. This board, and moves performed on it, are persistent. And
		aren`t effected by open/close operations with fd`s.
		- Termination - upon termination, all resources are released. This applies for
		both exit() and release().

-Examples:
	A legal sequence of writes can be: (1,1)(1,2)(1,3).
	A possible sequence of reads can be:(1,1)h,(1,2)h,(1,3)s.
	Meaning a ship was located horizontally and was sunk in 3 moves.
The board itself isn`t supposed to be visible to the player. The moves should reflect it`s inner state.
It can be a nice upgrade to the driver.
