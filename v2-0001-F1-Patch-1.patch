From 44e0a510152dc26e7ab0c31b9aac67debbf9d096 Mon Sep 17 00:00:00 2001
From: Mihir Parekh <mihir_parekh@fall2024-uml.kdlp.underground.software>
Date: Mon, 2 Dec 2024 14:23:14 -0500
Subject: [PATCH v2 1/2] F1 -- Patch 1

Here I added /specs/battleship files including Makefile, spec.txt, test.c.

Signed-off-by: Mihir Parekh <mihir_parekh@fall2024-uml.kdlp.underground.software>
---
 mihir-parekh/F1/tests/Makefile |  15 +
 mihir-parekh/F1/tests/spec.txt | 193 ++++++++
 mihir-parekh/F1/tests/test.c   | 805 +++++++++++++++++++++++++++++++++
 3 files changed, 1013 insertions(+)
 create mode 100644 mihir-parekh/F1/tests/Makefile
 create mode 100644 mihir-parekh/F1/tests/spec.txt
 create mode 100644 mihir-parekh/F1/tests/test.c

diff --git a/mihir-parekh/F1/tests/Makefile b/mihir-parekh/F1/tests/Makefile
new file mode 100644
index 0000000..d499e05
--- /dev/null
+++ b/mihir-parekh/F1/tests/Makefile
@@ -0,0 +1,15 @@
+COMPILER := clang
+COMPILER_FLAGS := -std=c99 -Wextra -Wpedantic
+SRCS := test.c
+OBJS=$(subst .c,.o,$(SRCS))
+BIN = test
+
+$(BIN): $(OBJS)
+	$(COMPILER) $(COMPILER_FLAGS) $^ -o $@
+
+$(OBJS): %.o: %.c
+	$(COMPILER) $(COMPILER_FLAGS) -c $^
+
+.PHONY: clean
+clean:
+	rm -f $(BIN) $(OBJS)
\ No newline at end of file
diff --git a/mihir-parekh/F1/tests/spec.txt b/mihir-parekh/F1/tests/spec.txt
new file mode 100644
index 0000000..e3f6b9b
--- /dev/null
+++ b/mihir-parekh/F1/tests/spec.txt
@@ -0,0 +1,193 @@
+-Introduction:
+
+	We have thought about implementing the game "Battleship",
+	as a character device driver. In the game - a random board
+	will be generted (Optionally - Based on user input regarding
+	size of board and number of battleships). A user will write
+	a cell number, and will be able to read, whether he - hit, miss
+	or sunk the enemy battleship. Once he is done he will receive
+	the Victory message (v). The player will be able to return
+	to previous moves using lseek. And create a new board with other
+	Parameters using ioctl.
+	Upon error, the module will return the error value (negative).
+	The module doesn`t have to support concurrency.
+
+*The inspiration for the following template
+has been Hila`s and Andrey`s beautiful document*
+
+-Syscall specification:
+
+	open(2):
+		-Description: Returns a file descriptor associated with the
+			 device driver.
+		-Behavior: If all parameters are valid, returns a file descriptor,
+			with offset to the last written byte. So if a player reads
+			from the file, it will receive the result of the last write.
+		-Parameters: const char *pathname - pathname to the device driver.
+			int flags - defines the mode in which the file opens.
+		-Returns: File descriptor upon success. And error value upon failure.
+		-Failure Modes:
+			- 'EACCES' - requested access to the file is not allowed.
+				Possibly because of wrong path, or the user doesn`t
+				Have the permissions requested.
+			- 'EINVAL' - invalid value in flags.
+
+	close(2):
+		-Description: closes file with given file descriptor, without
+			changing the internal state.
+		-Behavior: closes file associated with the device driver in the
+			processes fdt.
+		-Parameters: int fd - file descriptor.
+		-Returns: 0 on success. On error, error value is returned.
+		-Failure Modes:
+			- 'EBADF' - fd isn`t a valid open file descriptor.
+		-State: internal state of the device driver isn`t affected
+			due to the close of the file descriptor.
+
+	read(2):
+		-Description: Attempts to read up to count bytes from file descriptor
+			fd into the buffer strating at buf. Reads byte that indicates
+			the result of the matching write to the device driver. And the
+			matching players move.
+		-Behavior: If all parameters are valid (file descriptor, buffer and
+			a non negative number of bytes) tries to read count bytes to buffer.
+			Reads the move and the result, from the given offset.
+			If count doesn`t round to the needed amount - rounds down.
+			For example, Count is 10, and it is enough to read 1 move: (01,01):h.
+			Meaning: tried to shoot at location (1,1) and hit the battleship there.
+			Important note: Although it writes to buffer both the move and
+			the result. when file offset is changed, we expect it to only change
+			the turn. Meaning: The device driver should associate the move with
+			the result by itself. So a read from any offset in the file (if it
+			is within bounds) should be possible (If all other conditions hold).
+			If read was successful, offset within file isn`t moved by the amount
+			of bytes read, but by the amount of moves read.
+			So the smallest amount possible to be read is 9 bytes, which represent
+			a single move and it`s result.
+		-Parameters: int fd - file descriptor.
+			void buf[] - pointer to buffer to read to.
+			int count - amount of bytes to read - each move should take exactly
+			9 bytes. (xx,yy):r. where r is result.
+		-Returns: On success ,the number of bytes read is returned. And the file position
+			is advanced by the *number of moves* that matches it. 9 bytes = move.
+			On error, error value is returned.
+		-Failure Modes:
+			- 'EBADF' - fd is not a valid file descriptor ir is not open for reading.
+			- 'EFAULT' - buf is outside our accesible address space.
+			- 'EINVAL' - fd is attached to an object which isn`t suitable for reading.
+				- count is a negative number.
+		-State:
+			If read was successful, offset within file is moved by the amount of
+			*moves* read.
+
+	write(2):
+		-Description: Writes count bytes from the buffer starting at buf
+			to the file referred to by the file descriptor fd.
+			The bytes read are interpreted as a move - so must
+			be a valid move, otherwise errors will be thrown.
+		-Behavior: The user provides a buffer, fd and count bytes.
+			7 bytes match a move. And it`s the users responsibility to
+			provide valid moves of the form (xx,yy). If the moves are valid
+			internal buffers will be filled with responses (available to the user
+			through read).
+			Important Note: The following should return an error:
+				- Writing illegal moves (both illegal characters and outside
+				board bounds).
+				- Hitting a previously hit location.
+			In case of a sequence of moves, the module should process correctly
+			The legal moves, up to the illegal moves.
+			For example: for a sequence: (01,01),(10000,100000000). The first move
+			should be accepted (if that cell hasn`t been hit). And the second
+			one should cause an error.
+		-Parameters: int fd - file descriptor.
+			void buf[] - pointer to buffer to read from.
+			int count - amount of bytes to read - each move should take exactly
+			7 bytes. (xx,yy). And be within the board borders. Can`t hit same
+			location twice.
+		-Returns: On success ,the number of moves received is returned.
+			On error, error value is returned.
+		-Failure Modes:
+			- 'EBADF' - fd is not a valid file descriptor or is not open for writing.
+			- 'EFAULT' - buf is outside our accesible address space.
+			- 'EINVAL' - fd is attached to an object which isn`t suitable for reading.
+				- count is a negative number or doesn`t match a valid amount of bytes
+				per move (7). Or an illegal move has been attempted (as decribed in
+				the behavior section).
+		-State:
+			If the a move has been read and is legal. It is registered in internal matching
+			data structures. And the matching: result is put into the read buffer, for further
+			reading.
+
+	lseek(2):
+		-Description: reposition read file offset.
+		-Behavior: Repositions the file offset of the open file description
+			associated with the file descriptor fd to the argument offset
+			according to the directive whence as follows:
+			SEEK_SET:
+				the file offset is set to offset bytes.
+			SEEK_CUR:
+				The file offset is set to its current location plus
+				offset bytes.
+			SEEK_END:
+				The file offset is set to the size of the file plus offset bytes.
+			Important: every byte in the offset matches a result of a single move.
+			Doesn`t allow the number of bytes to be set beyond the end of the file.
+		-Parameters: int fd - file descriptor.
+			off_t offset - The number of bytes to offset by.
+			int whence - directive, semantics explained above.
+		-Returns: On success , the resulting offset location as measured in bytes from the
+			beginning of the file.
+			On error, error value is returned.
+		-Failure Modes:
+			- 'EBADF' - fd is not a valid file descriptor.
+			- 'EFAULT' - buf is outside our accesible address space.
+			- 'EINVAL' - whence is not valid, or if trying to offset to
+			an invalid location.
+		-State:
+			same as stated in behavior. Repositions file offset according
+			to diretive whence and offset value.
+
+	Ioctl(2):
+		-Description: Control device. Used to re-create game with different parameters,
+        and to perform basic undo redo operations.
+		-Behavior: Ioctl receives 2 parameters - board size and number of boats.
+			Implementors should decide on configuration of max size and amount
+			of boats and their size. (What are the sizes of the boats, For example:
+			First boat is size 3, second is size 4, third is size 5 and again).
+			Of course the amount of ships can`t exceed the number of cells on the
+			board, and ships can`t overlap.
+			Recreates the board from scratch, and re-generates randomly the ships
+			location. Board is initialized - meaning no moves are performed on this
+			new board. And all previous information is lost.
+			For undo and redo - they cancel & bring back the amount of moves stated.
+			Undo enables to cancel the amount of moves stated (should also effect
+			the results that read returns - a user can`t read moves that he canceled).
+			Same for redo - effects the read operation, a user will be able to read the
+			result of moves that were brought back.
+			If redo or undo is chosen - then board_size serves as the number of moves.
+		-Parameters: int fd - file descriptor.
+			int board_size - The new size for the board (its a square so it will be
+			board_size * board_size).
+			If the operation chosen in undo/redo - it states the amount of moves.
+			int ships - Number of ships on the new board.
+		-Returns: 0 On success , -1 on error.
+		-Failure Modes:
+			- 'EBADF' - fd is not a valid file descriptor.
+			- 'EINVAL' - number of ships or board size are negative.
+		-State:
+			Creates a new board with no moves performed on it, according to
+			given parameters (If they are legal).
+
+-Resource Lifecycle:
+		-Initialization - Upon initialization, a board of size 20*20 is allocated with a
+		random ship location. This board, and moves performed on it, are persistent. And
+		aren`t effected by open/close operations with fd`s.
+		- Termination - upon termination, all resources are released. This applies for
+		both exit() and release().
+
+-Examples:
+	A legal sequence of writes can be: (1,1)(1,2)(1,3).
+	A possible sequence of reads can be:(1,1)h,(1,2)h,(1,3)s.
+	Meaning a ship was located horizontally and was sunk in 3 moves.
+The board itself isn`t supposed to be visible to the player. The moves should reflect it`s inner state.
+It can be a nice upgrade to the driver.
diff --git a/mihir-parekh/F1/tests/test.c b/mihir-parekh/F1/tests/test.c
new file mode 100644
index 0000000..e4403b9
--- /dev/null
+++ b/mihir-parekh/F1/tests/test.c
@@ -0,0 +1,805 @@
+/*
+ *	  Final 0 - Technion CS 236009 Topics in Linux Kernel Development
+ *
+ *  Authors:
+ *		  Emily Dror <emily.d@campus.technion.ac.il>
+ *		  Michael Blum <michael.blum@campus.technion.ac.il>
+ */
+
+#include <assert.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+static const int test_count	 = 25;
+static const char *dev_path	 = "/dev/battleship";
+
+/* ............................ Submarines Definitions ............................ */
+
+#define BATTLESHIP_MAGIC			('b')
+#define BATTLESHIP_RESET		_IOW(BATTLESHIP_MAGIC, 0x01, struct battleship_config)
+#define BATTLESHIP_UNDO			 _IO(BATTLESHIP_MAGIC, 0x02)
+#define BATTLESHIP_REDO			 _IO(BATTLESHIP_MAGIC, 0x03)
+
+#define BATTLESHIP_MOVE_SIZE		(7)
+#define BATTLESHIP_RESP_SIZE		(2)
+#define BATTLESHIP_READ_SIZE		(BATTLESHIP_MOVE_SIZE + BATTLESHIP_RESP_SIZE)
+
+struct battleship_config {
+	int ship_count;
+	int board_width;
+};
+
+const struct battleship_config default_config = {
+	.ship_count = 5,
+	.board_width = 20,
+};
+
+const struct battleship_config empty_config = {
+	.ship_count = 0,
+	.board_width = 20,
+};
+
+/* ............................ Utilities for TAP testing ............................ */
+
+static int test_current = 1;
+
+static inline void tap_print_header(void)
+{
+	printf("1..%d\n", test_count);
+}
+
+static inline int tap_ok(int cond, const char *msg)
+{
+	if (!cond) {
+		printf("not ok %d - %s\n", test_current, msg);
+		return 1;
+	}
+	return 0;
+}
+
+static inline int tap_test_passed(const char *msg)
+{
+	printf("ok %d - %s passed\n", test_current, msg);
+	return 0;
+}
+
+static void run_test(int (*test_method)(void))
+{
+	if (test_method())
+		exit(EXIT_FAILURE);
+
+	++test_current;
+}
+
+/* ............................ Tests' Implementation ............................ */
+
+static int test_open(void)
+{
+	int retval = open(dev_path, O_RDWR);
+
+	if (tap_ok(retval != -1, "open valid file path"))
+		return 1;
+
+	retval = open("/dev/nonsense", O_RDWR);
+	if (tap_ok(retval == -1, "open corrupt file path"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_close(void)
+{
+	int retval = open(dev_path, O_RDWR);
+
+	if (tap_ok(retval != -1, "open valid file path"))
+		return 1;
+
+	retval = close(retval);
+	if (tap_ok(retval != -1, "close file descriptor"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_ioctl_sanity(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_ioctl_errors(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(-1, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == -EBADF, "invalid file descriptors"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_RESET, (struct battleship_config) {
+		.ship_count = 5,
+		.board_width = -20,
+	});
+	if (tap_ok(retval == -EINVAL, "board size is negative"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_RESET, (struct battleship_config) {
+		.ship_count = -5,
+		.board_width = 20,
+	});
+	if (tap_ok(retval == -EINVAL, "number of ships is negative"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_RESET, (struct battleship_config) {
+		.ship_count = -5,
+		.board_width = -20,
+	});
+	if (tap_ok(retval == -EINVAL, "number of ships and board size are negative"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_read_sanity(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE];
+	ssize_t bytes_read = read(fd, NULL, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read < 0, "reading into NULL"))
+		return 1;
+
+	bytes_read = read(fd, buffer, -BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read < 0, "reading negative bytes"))
+		return 1;
+
+	bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read != -1, "reading into normal buffer"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_read_errors(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 2];
+	ssize_t bytes_read = read(-1, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == -EBADF, "read from invalid file descriptors"))
+		return 1;
+
+	int write_fd = open("/tmp/tmp_file", O_WRONLY | O_CREAT);
+
+	bytes_read = read(write_fd, buffer, BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read == -EINVAL, "read from an object which isn`t suitable for reading"))
+		return 1;
+
+	bytes_read = read(fd, buffer, -BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read == -EINVAL, "reading negative bytes"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_write_sanity(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	char buffer[] = "(01,01)";
+	ssize_t moves_written = write(fd, NULL, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written < 0, "writing into NULL"))
+		return 1;
+
+	moves_written = write(fd, buffer, -BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written < 0, "writing negative bytes"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_write_errors(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	char buffer[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(-1, buffer, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == -EBADF, "write into invalid file descriptors"))
+		return 1;
+
+	moves_written = write(fd, (void *)open, BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written == -EFAULT, "write into outside our accessible address space"))
+		return 1;
+
+	int read_fd = open("./spec.txt", O_RDONLY);
+
+	moves_written = write(read_fd, buffer, BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written == -EINVAL,
+		   "write into an object which isn`t suitable for reading"))
+		return 1;
+
+	moves_written = write(fd, buffer, -BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written == -EINVAL, "writing negative bytes"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_lseek_sanity(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	off_t offset = lseek(fd, 0, SEEK_SET);
+
+	if (tap_ok(offset == 0, "lseek to beginning of file"))
+		return 1;
+
+	offset = lseek(fd, 0, SEEK_END);
+	if (tap_ok(offset == 0, "lseek to end of file"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_lseek_errors(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	off_t offset = lseek(-1, 0, SEEK_SET);
+
+	if (tap_ok(offset == -EBADF, "lseek into invalid file descriptors"))
+		return 1;
+
+	offset = lseek(fd, 1, SEEK_END);
+	if (tap_ok(offset == -EINVAL, "lseek into an invalid location"))
+		return 1;
+
+	offset = lseek(fd, 0, 4);
+	if (tap_ok(offset == -EINVAL, "lseek's whence is not valid"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_write_moves(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char buffer[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, buffer, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 1, "write one move"))
+		return 1;
+
+	moves_written = write(fd, buffer + BATTLESHIP_MOVE_SIZE, 2 * BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written == 2, "write multiple moves"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_read_move(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "create empty board"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 4];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == 0 && strlen(buffer) == 0, "read from empty board"))
+		return 1;
+
+	char moves[] = "(01,01)";
+	ssize_t moves_written = write(fd, moves, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 1, "write one move"))
+		return 1;
+
+	bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,01):m") == 0, "read one move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_read_multiple_moves(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "create empty board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 4];
+	ssize_t bytes_read = read(fd, buffer, 3 * BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == 3 * BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,01):m(01,02):m(01,03):m") == 0, "read multiple moves"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_read_round_down(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "create empty board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 4];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE / 2);
+
+	if (tap_ok(bytes_read == 0 && strlen(buffer) == 0, "read no moves"))
+		return 1;
+
+	bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE + BATTLESHIP_READ_SIZE / 2);
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,01):m") == 0, "read one move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_write_invalid(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "create empty board"))
+		return 1;
+
+	char moves[] = "invalid";
+	ssize_t moves_written = write(fd, moves, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written < 0, "write invalid move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_write_out_of_bounds(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	const int board_width = 10;
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "create empty board"))
+		return 1;
+
+	char moves[] = "(11,01)(01,11)(11,11)";
+	ssize_t moves_written = write(fd, moves, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written < 0, "write out of bounds"))
+		return 1;
+
+	moves_written = write(fd, moves + BATTLESHIP_MOVE_SIZE, BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written < 0, "write out of bounds"))
+		return 1;
+
+	moves_written = write(fd, moves + 2 * BATTLESHIP_MOVE_SIZE, BATTLESHIP_MOVE_SIZE);
+	if (tap_ok(moves_written < 0, "write out of bounds"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_write_whitespaces(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "create empty board"))
+		return 1;
+
+	char moves[] = " (01,01) ";
+	ssize_t moves_written = write(fd, moves, BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 1, "write one move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_lseek_beginning(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	off_t offset = lseek(fd, 0, SEEK_SET);
+
+	if (tap_ok(offset == 0, "lseek to beginning of file"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 2];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,01):m") == 0, "read first move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_lseek_end(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	off_t offset = lseek(fd, -BATTLESHIP_READ_SIZE, SEEK_END);
+
+	if (tap_ok(offset == (2 * BATTLESHIP_READ_SIZE), "lseek to end of file"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 2];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,03):m") == 0, "read last move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_lseek_current(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	off_t offset = lseek(fd, BATTLESHIP_READ_SIZE, SEEK_CUR);
+
+	if (tap_ok(offset == 0, "lseek to 2nd move"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 2];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,02):m") == 0, "read second move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_lseek_out_of_bounds(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	off_t offset = lseek(fd, 4 * BATTLESHIP_READ_SIZE, SEEK_SET);
+
+	if (tap_ok(offset < 0, "lseek out of bounds"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_ioctl_undo_sanity(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_UNDO);
+	if (tap_ok(retval < 0, "undo on empty board with no moves"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_ioctl_redo_sanity(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, default_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_REDO);
+	if (tap_ok(retval < 0, "redo on empty board with no undoes"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_ioctl_undo(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	off_t offset = lseek(fd, -BATTLESHIP_READ_SIZE, SEEK_END);
+
+	if (tap_ok(offset == (2 * BATTLESHIP_READ_SIZE), "lseek to end of file"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 2];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,03):m") == 0, "read last move"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_UNDO);
+	if (tap_ok(retval == 0, "undo"))
+		return 1;
+
+	offset = lseek(fd, -BATTLESHIP_READ_SIZE, SEEK_END);
+	if (tap_ok(offset == BATTLESHIP_READ_SIZE, "lseek to end of file"))
+		return 1;
+
+	bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,02):m") == 0, "read last move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+static int test_ioctl_redo(void)
+{
+	int fd = open(dev_path, O_RDWR);
+
+	if (tap_ok(fd != -1, "open valid file path"))
+		return 1;
+
+	int retval = ioctl(fd, BATTLESHIP_RESET, empty_config);
+
+	if (tap_ok(retval == 0, "reset board"))
+		return 1;
+
+	char moves[] = "(01,01)(01,02)(01,03)";
+	ssize_t moves_written = write(fd, moves, 3 * BATTLESHIP_MOVE_SIZE);
+
+	if (tap_ok(moves_written == 3, "write multiple moves"))
+		return 1;
+
+	off_t offset = lseek(fd, -BATTLESHIP_READ_SIZE, SEEK_END);
+
+	if (tap_ok(offset == (2 * BATTLESHIP_READ_SIZE), "lseek to end of file"))
+		return 1;
+
+	char buffer[BATTLESHIP_READ_SIZE * 2];
+	ssize_t bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,03):m") == 0, "read last move"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_UNDO);
+	if (tap_ok(retval == 0, "undo"))
+		return 1;
+
+	offset = lseek(fd, -BATTLESHIP_READ_SIZE, SEEK_END);
+	if (tap_ok(offset == BATTLESHIP_READ_SIZE, "lseek to end of file"))
+		return 1;
+
+	bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,02):m") == 0, "read last move"))
+		return 1;
+
+	retval = ioctl(fd, BATTLESHIP_REDO);
+	if (tap_ok(retval == 0, "redo"))
+		return 1;
+
+	offset = lseek(fd, -BATTLESHIP_READ_SIZE, SEEK_END);
+	if (tap_ok(offset == BATTLESHIP_READ_SIZE, "lseek to end of file"))
+		return 1;
+
+	bytes_read = read(fd, buffer, BATTLESHIP_READ_SIZE);
+	if (tap_ok(bytes_read == BATTLESHIP_READ_SIZE &&
+		   strcmp(buffer, "(01,03):m") == 0, "read last move"))
+		return 1;
+
+	return tap_test_passed(__func__);
+}
+
+int main(void)
+{
+	tap_print_header();
+
+	run_test(test_open);
+	run_test(test_close);
+
+	run_test(test_ioctl_sanity);
+	run_test(test_ioctl_errors);
+
+	run_test(test_read_sanity);
+	run_test(test_read_errors);
+
+	run_test(test_write_sanity);
+	run_test(test_write_errors);
+
+	run_test(test_lseek_sanity);
+	run_test(test_lseek_errors);
+
+	run_test(test_write_moves);
+	run_test(test_read_move);
+
+	run_test(test_read_multiple_moves);
+	run_test(test_read_round_down);
+
+	run_test(test_write_invalid);
+	run_test(test_write_out_of_bounds);
+	run_test(test_write_whitespaces);
+
+	run_test(test_lseek_beginning);
+	run_test(test_lseek_end);
+	run_test(test_lseek_current);
+	run_test(test_lseek_out_of_bounds);
+
+	run_test(test_ioctl_undo_sanity);
+	run_test(test_ioctl_redo_sanity);
+	run_test(test_ioctl_undo);
+	run_test(test_ioctl_redo);
+	return 0;
+}
-- 
2.46.0

